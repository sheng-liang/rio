configs:
  config-autoscaler:
    enable-scale-to-zero: "true"
    max-scale-up-rate: "10"
    container-concurrency-target-percentage: "1.0"
    container-concurrency-target-default: "1"
    stable-window: 60s
    panic-window: 6s
    tick-interval: 2s
    scale-to-zero-threshold: 2m
    scale-to-zero-grace-period: 1m
  config-logging:
    zap-logger-config: |-
      {
        "level": "info",
        "development": false,
        "outputPaths": ["stdout"],
        "errorOutputPaths": ["stderr"],
        "encoding": "json",
        "encoderConfig": {
          "timeKey": "ts",
          "levelKey": "level",
          "nameKey": "logger",
          "callerKey": "caller",
          "messageKey": "msg",
          "stacktraceKey": "stacktrace",
          "lineEnding": "",
          "levelEncoder": "",
          "timeEncoder": "iso8601",
          "durationEncoder": "",
          "callerEncoder": ""
        }
      }
    loglevel.controller: "info"
    loglevel.autoscaler: "info"
    loglevel.queueproxy: "info"
    loglevel.webhook: "info"
    loglevel.activator: "info"
  config-observability:
    logging.enable-var-log-collection: "false"
    logging.fluentd-sidecar-image: k8s.gcr.io/fluentd-elasticsearch:v2.0.4
    metrics.backend-destination: prometheus
    metrics.request-metrics-backend-destination: prometheus
    metrics.stackdriver-project-id: "<your stackdriver project id>"
    metrics.allow-stackdriver-custom-metrics: "false"
  config-tracing:
    enable: "false"
  config-gc:
    stale-revision-create-delay: "24h"
    stale-revision-timeout: "15h"
    stale-revision-minimum-generations: "1"
    stale-revision-lastpinned-debounce: "5h"
  config-deployment:
    queueSidecarImage: gcr.io/knative-releases/github.com/knative/serving/cmd/queue@sha256:1e40c99ff5977daa2d69873fff604c6d09651af1f9ff15aadf8849b3ee77ab45
  config-domain:
    svc.cluster.local: |
      selector:
        app: secret
  config-istio:
    gateway.knative-ingress-gateway: "istio-ingressgateway.istio-system.svc.cluster.local"
    local-gateway.cluster-local-gateway: "cluster-local-gateway.istio-system.svc.cluster.local"
  config-network:
    autoTLS: "Disabled"

services:
  autoscaler:
    disableServiceMesh: true
    global_permissions:
    - '* configmaps'
    - '* events'
    - get,list,update,watch,delete rio.cattle.io/services
    - get,watch,list,update,create,patch autoscale.rio.cattle.io/servicescalerecommendations
    - get,watch,list,update,create,patch pods
    - get,watch,list,update,create,patch endpoints
    - get,watch,list,update,create,patch services
    - get,watch,list,update,create,patch apps/deployments
    - get,watch,list,update,create,patch apps/deployments/finalizers
    - get,watch,list,update,create,patch apps/deployments
    - get,watch,list,update,create,patch apiextensions.k8s.io/customresourcedefinitions
    - get,watch,list,update,create,patch autoscaling/horizontalpodautoscalers
    - get,watch,list,update,create,patch serving.knative.dev/*
    - get,watch,list,update,create,patch serving.knative.dev/*/status
    - get,watch,list,update,create,patch serving.knative.dev/*/finalizers
    - get,watch,list,update,create,patch autoscaling.internal.knative.dev/*
    - get,watch,list,update,create,patch autoscaling.internal.knative.dev/*/status
    - get,watch,list,update,create,patch autoscaling.internal.knative.dev/*/finalizers
    - get,watch,list,update,create,patch networking.internal.knative.dev/*
    - get,watch,list,update,create,patch networking.internal.knative.dev/*/status
    - get,watch,list,update,create,patch networking.internal.knative.dev/*/finalizers
    - get,watch,list,update,create,patch caching.internal.knative.dev/images
    image: rancher/autoscaler-b41733a3e5694e8fc64777bdfd8e791a@sha256:2545ae552c52f0eac70dff8c1e0b35a8ae9dbd6c05a6d8f3780c2b35f5a9ad73
    imagePullPolicy: always
    ports:
    - 8080/http,websocket,internal=true
    - 9090/http,metrics,internal=true
    configs:
    - config-autoscaler:/etc/config-autoscaler
    - config-logging:/etc/config-logging
    - config-observability:/etc/config-observability
    env:
    - SYSTEM_NAMESPACE=$(self/namespace)
  activator:
    disableServiceMesh: true
    global_permissions:
    - '* configmaps'
    - '* events'
    - get,list,update,watch,delete rio.cattle.io/services
    - get,watch,list,update,create,patch autoscale.rio.cattle.io/servicescalerecommendations
    - get,watch,list,update,create,patch pods
    - get,watch,list,update,create,patch endpoints
    - get,watch,list,update,create,patch services
    - get,watch,list,update,create,patch apps/deployments
    - get,watch,list,update,create,patch apps/deployments/finalizers
    - get,watch,list,update,create,patch apps/deployments apiextensions.k8s.io/customresourcedefinitions
    - get,watch,list,update,create,patch autoscaling/horizontalpodautoscalers
    - get,watch,list,update,create,patch serving.knative.dev/*
    - get,watch,list,update,create,patch serving.knative.dev/*/status
    - get,watch,list,update,create,patch serving.knative.dev/*/finalizers
    - get,watch,list,update,create,patch autoscaling.internal.knative.dev/*
    - get,watch,list,update,create,patch autoscaling.internal.knative.dev/*/status
    - get,watch,list,update,create,patch autoscaling.internal.knative.dev/*/finalizers
    - get,watch,list,update,create,patch networking.internal.knative.dev/*
    - get,watch,list,update,create,patch networking.internal.knative.dev/*/status
    - get,watch,list,update,create,patch networking.internal.knative.dev/*/finalizers
    - get,watch,list,update,create,patch caching.internal.knative.dev/images
    image: rancher/activator-2d008c4c36689d255523e5fa210c0bec@sha256:ca69d7fa28c9d6f2ae02e940df8b8d5d76b13d897b5e0d4a4028432f50f3ca1a
    imagePullPolicy: always
    livenessProbe:
      httpGet:
        httpHeaders:
          - name: k-kubelet-probe
            value: activator
        path: /healthz
        port: 8012
    ports:
    - 8012/http,http1-port,internal=true
    - 8013/http,h2c-port,internal=true
    - 9090/http,metrics,internal=true
    args:
    - -logtostderr=false
    - -stderrthreshold=FATAL
    env:
    - SYSTEM_NAMESPACE=$(self/namespace)
    - POD_NAME=$(self/name)
    configs:
    - config-logging:/etc/config-logging
    - config-observability:/etc/config-observability
  controller:
    disableServiceMesh: true
    global_permissions:
    - '* configmaps'
    - '* events'
    - get,list,update,watch,delete rio.cattle.io/services
    - get,watch,list,update,create,patch autoscale.rio.cattle.io/servicescalerecommendations
    - get,watch,list,update,create,patch pods
    - get,watch,list,update,create,patch endpoints
    - get,watch,list,update,create,patch services
    - get,watch,list,update,create,patch apps/deployments
    - get,watch,list,update,create,patch apps/deployments/finalizers
    - get,watch,list,update,create,patch apps/deployments apiextensions.k8s.io/customresourcedefinitions
    - get,watch,list,update,create,patch autoscaling/horizontalpodautoscalers
    - get,watch,list,update,create,patch serving.knative.dev/*
    - get,watch,list,update,create,patch serving.knative.dev/*/status
    - get,watch,list,update,create,patch serving.knative.dev/*/finalizers
    - get,watch,list,update,create,patch autoscaling.internal.knative.dev/*
    - get,watch,list,update,create,patch autoscaling.internal.knative.dev/*/status
    - get,watch,list,update,create,patch autoscaling.internal.knative.dev/*/finalizers
    - get,watch,list,update,create,patch networking.internal.knative.dev/*
    - get,watch,list,update,create,patch networking.internal.knative.dev/*/status
    - get,watch,list,update,create,patch networking.internal.knative.dev/*/finalizers
    - get,watch,list,update,create,patch caching.internal.knative.dev/images
    image: rancher/controller-43f0364ab2f6dab17267e80a1f6a4adc@sha256:48827922082604e3e897732a91419fbec9086b8844d9b0230e0f47d0bbf67973
    ports:
    - 9090/http,metrics,internal=true
    configs:
    - config-logging:/etc/config-logging
    env:
    - SYSTEM_NAMESPACE=$(self/namespace)

kubernetes:
  manifest: |-
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: activator
        serving.knative.dev/release: "v0.6.0"
      name: activator-service
      namespace: ${NAMESPACE}
    spec:
      ports:
      - name: http
        port: 80
        protocol: TCP
        targetPort: 8012
      - name: http2
        port: 81
        protocol: TCP
        targetPort: 8013
      - name: metrics
        port: 9090
        protocol: TCP
        targetPort: 9090
      selector:
        app: activator
      type: ClusterIP
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      labels:
        knative.dev/crd-install: "true"
        serving.knative.dev/release: "v0.6.0"
      name: certificates.networking.internal.knative.dev
    spec:
      additionalPrinterColumns:
      - JSONPath: .status.conditions[?(@.type=="Ready")].status
        name: Ready
        type: string
      - JSONPath: .status.conditions[?(@.type=="Ready")].reason
        name: Reason
        type: string
      group: networking.internal.knative.dev
      names:
        categories:
        - all
        - knative-internal
        - networking
        kind: Certificate
        plural: certificates
        shortNames:
        - kcert
        singular: certificate
      scope: Namespaced
      subresources:
        status: {}
      version: v1alpha1
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      labels:
        knative.dev/crd-install: "true"
        serving.knative.dev/release: "v0.6.0"
      name: clusteringresses.networking.internal.knative.dev
    spec:
      additionalPrinterColumns:
      - JSONPath: .status.conditions[?(@.type=='Ready')].status
        name: Ready
        type: string
      - JSONPath: .status.conditions[?(@.type=='Ready')].reason
        name: Reason
        type: string
      group: networking.internal.knative.dev
      names:
        categories:
        - all
        - knative-internal
        - networking
        kind: ClusterIngress
        plural: clusteringresses
        singular: clusteringress
      scope: Cluster
      subresources:
        status: {}
      version: v1alpha1
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      labels:
        knative.dev/crd-install: "true"
        serving.knative.dev/release: "v0.6.0"
      name: configurations.serving.knative.dev
    spec:
      additionalPrinterColumns:
      - JSONPath: .status.latestCreatedRevisionName
        name: LatestCreated
        type: string
      - JSONPath: .status.latestReadyRevisionName
        name: LatestReady
        type: string
      - JSONPath: .status.conditions[?(@.type=='Ready')].status
        name: Ready
        type: string
      - JSONPath: .status.conditions[?(@.type=='Ready')].reason
        name: Reason
        type: string
      group: serving.knative.dev
      names:
        categories:
        - all
        - knative
        - serving
        kind: Configuration
        plural: configurations
        shortNames:
        - config
        - cfg
        singular: configuration
      scope: Namespaced
      subresources:
        status: {}
      version: v1alpha1
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      labels:
        knative.dev/crd-install: "true"
      name: images.caching.internal.knative.dev
    spec:
      group: caching.internal.knative.dev
      names:
        categories:
        - all
        - knative-internal
        - caching
        kind: Image
        plural: images
        shortNames:
        - img
        singular: image
      scope: Namespaced
      subresources:
        status: {}
      version: v1alpha1
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      labels:
        knative.dev/crd-install: "true"
        serving.knative.dev/release: "v0.6.0"
      name: podautoscalers.autoscaling.internal.knative.dev
    spec:
      additionalPrinterColumns:
      - JSONPath: .status.conditions[?(@.type=='Ready')].status
        name: Ready
        type: string
      - JSONPath: .status.conditions[?(@.type=='Ready')].reason
        name: Reason
        type: string
      group: autoscaling.internal.knative.dev
      names:
        categories:
        - all
        - knative-internal
        - autoscaling
        kind: PodAutoscaler
        plural: podautoscalers
        shortNames:
        - kpa
        singular: podautoscaler
      scope: Namespaced
      subresources:
        status: {}
      version: v1alpha1
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      labels:
        knative.dev/crd-install: "true"
        serving.knative.dev/release: "v0.6.0"
      name: revisions.serving.knative.dev
    spec:
      additionalPrinterColumns:
      - JSONPath: .status.serviceName
        name: Service Name
        type: string
      - JSONPath: .metadata.labels['serving\.knative\.dev/configurationGeneration']
        name: Generation
        type: string
      - JSONPath: .status.conditions[?(@.type=='Ready')].status
        name: Ready
        type: string
      - JSONPath: .status.conditions[?(@.type=='Ready')].reason
        name: Reason
        type: string
      group: serving.knative.dev
      names:
        categories:
        - all
        - knative
        - serving
        kind: Revision
        plural: revisions
        shortNames:
        - rev
        singular: revision
      scope: Namespaced
      subresources:
        status: {}
      version: v1alpha1
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      labels:
        knative.dev/crd-install: "true"
        serving.knative.dev/release: "v0.6.0"
      name: routes.serving.knative.dev
    spec:
      additionalPrinterColumns:
      - JSONPath: .status.url
        name: URL
        type: string
      - JSONPath: .status.conditions[?(@.type=='Ready')].status
        name: Ready
        type: string
      - JSONPath: .status.conditions[?(@.type=='Ready')].reason
        name: Reason
        type: string
      group: serving.knative.dev
      names:
        categories:
        - all
        - knative
        - serving
        kind: Route
        plural: routes
        shortNames:
        - rt
        singular: route
      scope: Namespaced
      subresources:
        status: {}
      version: v1alpha1
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      labels:
        knative.dev/crd-install: "true"
        serving.knative.dev/release: "v0.6.0"
      name: services.serving.knative.dev
    spec:
      additionalPrinterColumns:
      - JSONPath: .status.url
        name: URL
        type: string
      - JSONPath: .status.latestCreatedRevisionName
        name: LatestCreated
        type: string
      - JSONPath: .status.latestReadyRevisionName
        name: LatestReady
        type: string
      - JSONPath: .status.conditions[?(@.type=='Ready')].status
        name: Ready
        type: string
      - JSONPath: .status.conditions[?(@.type=='Ready')].reason
        name: Reason
        type: string
      group: serving.knative.dev
      names:
        categories:
        - all
        - knative
        - serving
        kind: Service
        plural: services
        shortNames:
        - kservice
        - ksvc
        singular: service
      scope: Namespaced
      subresources:
        status: {}
      version: v1alpha1
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      labels:
        knative.dev/crd-install: "true"
        serving.knative.dev/release: "v0.6.0"
      name: serverlessservices.networking.internal.knative.dev
    spec:
      additionalPrinterColumns:
      - JSONPath: .status.serviceName
        name: ServiceName
        type: string
      - JSONPath: .status.privateServiceName
        name: PrivateServiceName
        type: string
      - JSONPath: .status.conditions[?(@.type=='Ready')].status
        name: Ready
        type: string
      - JSONPath: .status.conditions[?(@.type=='Ready')].reason
        name: Reason
        type: string
      group: networking.internal.knative.dev
      names:
        categories:
        - all
        - knative-internal
        - networking
        kind: ServerlessService
        plural: serverlessservices
        shortNames:
        - sks
        singular: serverlessservice
      scope: Namespaced
      subresources:
        status: {}
      version: v1alpha1
    ---